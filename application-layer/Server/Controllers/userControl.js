const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('./server/models/userModel');

const saltFactor = 12; // Higher salt factor for increased security
const secretKey = require('crypto').randomBytes(64).toString('hex');


// Register a new user with auto-generated password by the system admin
const registerUserWithAutoGeneratedPasswordByAdmin = async (username, role, createdBy) => {
  try {
    // Check if the username is already taken
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      throw new Error('Username already exists');
    }

    // Generate a random password for the new user
    const generatedPassword = generateRandomPassword();

    // Hash the generated password
    const hashedPassword = await bcrypt.hash(generatedPassword, saltFactor);

    // Create a new user document
    const newUser = new User({
      username,
      password: hashedPassword,
      role,
      createdBy
    });

    // Save the new user to the database
    await newUser.save();

    return {
      username,
      password: generatedPassword,
      role
    };
  } catch (error) {
    throw error;
  }
};

// Helper function to generate a random password
const generateRandomPassword = () => {
  const length = 10; // Desired password length
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let randomPassword = '';

  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    randomPassword += characters.charAt(randomIndex);
  }

  return randomPassword;
};

// Authenticate the token from the request headers
const authenticateToken = (req, res, next) => {
  const token = req.headers.authorization;

  if (!token) {
    return res.status(401).send('Access denied. Token missing.');
  }

  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) {
      return res.status(401).send('Access denied. Invalid token.');
    }

    req.user = decoded;
    next();
  });
};

module.exports = {
  registerUserWithAutoGeneratedPasswordByAdmin,
  generateRandomPassword,
  authenticateToken
};
